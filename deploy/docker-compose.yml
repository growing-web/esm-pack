version: '3'
services:
  api-server:
    build:
      context: ./
      dockerfile: ./Dockerfile_API
      args:
        NODE_ENV: development
    # 构建镜像名，使用项目名
    image: esmpack-api-server:prod
    container_name: esmpack-api-server
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      # 端口映射。开发机器上开放的端口：服务运行实际监听的端口
      - '8080:6123'
    healthcheck:
      test: curl -f http://localhost:6123/health
      interval: 15s
      timeout: 1s
      retries: 3
      start_period: 60s
    volumes:
      - './:/usr/apps/esmpack-api-server'
    networks:
      - app-network
  api:
    image: nginx:stable-alpine
    container_name: esmpack-api-nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    privileged: true
    volumes:
      - './nginx-api.conf:/etc/nginx/nginx.conf'
    #   - './nginx-api.conf:/etc/nginx/conf.d/nginx.conf'
    #   nginx.conf /etc/nginx/nginx.conf
    depends_on:
      - api-server
    networks:
      - app-network
  delivr-server:
    build:
      context: ./
      dockerfile: ./Dockerfile_DELIVR
      args:
        NODE_ENV: development
    # 构建镜像名，使用项目名
    image: esmpack-delivr-server:dev
    container_name: esmpack-delivr-server
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      # 端口映射。开发机器上开放的端口：服务运行实际监听的端口
      - '8081:6126'
    healthcheck:
      test: curl -f http://localhost:6126/health
      interval: 15s
      timeout: 1s
      retries: 3
      start_period: 60s
    volumes:
      - './:/usr/apps/esmpack-delivr-server'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
